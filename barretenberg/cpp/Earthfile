VERSION 0.8
ARG --global module=barretenberg-cpp

wasmtime:
    FROM ubuntu:noble
    RUN apt update && apt install -y curl xz-utils
    RUN curl https://wasmtime.dev/install.sh -sSf | bash
    SAVE ARTIFACT /root/.wasmtime/bin/wasmtime

source: #aztec-tag=cache
    FROM ../../build-images+build
    WORKDIR /usr/src/barretenberg
    # cpp source
    COPY --dir src/barretenberg src/CMakeLists.txt src
    # cmake source
    COPY --dir cmake CMakeLists.txt CMakePresets.json .
    # for debugging rebuilds
    RUN echo CONTENT HASH $(find . -type f -exec sha256sum {} ';' | sort | sha256sum | awk '{print $1}') | tee .content-hash

preset-darwin-arm64:
    FROM +source
    LET OSX_SDK="MacOSX14.0.sdk"
    LET OSX_SDK_URL="https://github.com/joseluisq/macosx-sdks/releases/download/14.0/${OSX_SDK}.tar.xz"
    RUN curl -sSL "$OSX_SDK_URL" | tar -xJ -C /opt/osxcross/SDK && rm -rf /opt/osxcross/SDK/$OSX_SDK/System
    RUN cmake --preset darwin-arm64 -Bbuild && cmake --build build --target bb && bash -O extglob -c "rm -rf build/!(bin)"
    SAVE ARTIFACT build/bin AS LOCAL build-darwin-arm64/bin

PRESET:
    FUNCTION
    ARG preset
    ARG targets
    ARG tag=""
    FROM +source
    # build and keep just binaries
    RUN cmake --preset $preset -Bbuild && \
        cmake --build build --target $targets && \
        bash -O extglob -c "rm -rf build/!(bin)"
    SAVE IMAGE --push aztecprotocol/cache:barretenberg-preset-$preset$tag
    SAVE ARTIFACT build/bin

preset-release: #aztec-tag=cache
    DO +PRESET --preset=clang16 --targets=bb

preset-debug: #aztec-tag=cache
    DO +PRESET --preset=clang16-dbg --targets=bb

preset-wasm: #aztec-tag=cache
    ARG TARGETARCH
    FROM +source
    IF [ $TARGETARCH = arm64 ]
        # Just use threads for now
        FROM +preset-wasm-threads
        SAVE ARTIFACT build/bin
    ELSE
        RUN cmake --preset wasm -Bbuild && cmake --build build --target barretenberg.wasm && bash -O extglob -c "rm -rf build/!(bin)"
        RUN /opt/wasi-sdk/bin/llvm-strip ./build/bin/barretenberg.wasm
        SAVE ARTIFACT build/bin
        SAVE IMAGE --push aztecprotocol/cache:barretenberg-preset-wasm
    END

preset-sol: #aztec-tag=cache
    DO +PRESET --preset=clang16 --targets="solidity_key_gen solidity_proof_gen" --tag=sol

preset-wasm-threads: #aztec-tag=cache
    FROM +source
    RUN cmake --preset wasm-threads -Bbuild && cmake --build build --target barretenberg.wasm && bash -O extglob -c "rm -rf build/!(bin)"
    # TODO(https://github.com/AztecProtocol/barretenberg/issues/941) We currently do not strip barretenberg threaded wasm, for stack traces.
    # RUN /opt/wasi-sdk/bin/llvm-strip ./build/bin/barretenberg.wasm
    SAVE ARTIFACT build/bin
    SAVE IMAGE --push aztecprotocol/cache:barretenberg-preset-wasm-threads

preset-gcc: #aztec-tag=cache
    DO +PRESET --preset=gcc --targets="all"

preset-fuzzing: #aztec-tag=cache
    DO +PRESET --preset=fuzzing --targets="all"

preset-clang-assert: #aztec-tag=cache
    DO +PRESET --preset=clang16-assert --targets="all"

# benchmarking images
# these are either fresh builds just for benching (op-count and op-count-time)
# or build the binaries we need for benchmarking
preset-op-count-bench: #aztec-tag=cache
    DO +PRESET --preset=op-count --targets="ultra_honk_bench client_ivc_bench" --tag=bench

preset-op-count-time-bench: #aztec-tag=cache
    DO +PRESET --preset=op-count-time --targets="ultra_honk_bench client_ivc_bench" --tag=bench

preset-release-bench: #aztec-tag=cache
    DO +PRESET --preset=clang16 --targets="ultra_honk_bench client_ivc_bench" --tag=bench

preset-wasm-bench: #aztec-tag=cache
    DO +PRESET --preset=wasm-threads --targets="ultra_honk_bench client_ivc_bench" --tag=bench

# test images
preset-release-assert-test: #aztec-tag=cache
    DO +PRESET --preset=clang16-assert --targets="all" --tag=test

# Sent to the bench runner using a earthly --push +bench-binaries
# then we can run earthly +bench-ultra-honk --bench_mode=cache
bench-binaries: #aztec-tag=cache
    ARG EARTHLY_TARGET_NAME
    ARG EARTHLY_GIT_HASH
    ARG TARGETARCH
    ARG bench_mode=build
    LOCALLY
    IF [ $bench_mode = cache ]
        FROM aztecprotocol/bb-bench-binaries:$TARGETARCH-$EARTHLY_GIT_HASH
        SAVE ARTIFACT ./*
    ELSE
        FROM scratch
        COPY +preset-op-count-time-bench/bin/*_bench op-count-time/bin/
        COPY +preset-op-count-bench/bin/*_bench op-count/bin/
        COPY +preset-release-bench/bin/*_bench release/bin/
        COPY +preset-wasm-bench/bin/*_bench wasm/bin/
        SAVE ARTIFACT ./*
        SAVE IMAGE --push aztecprotocol/bb-bench-binaries:$TARGETARCH-$EARTHLY_GIT_HASH
    END

# Runs on the bench image, sent from the builder runner
bench-ultra-honk:
    BUILD +wasmtime # prefetch
    FROM ubuntu:noble
    COPY --dir +bench-binaries/* .
    # install SRS needed for proving
    COPY --dir ./srs_db/+build/. srs_db
    RUN cd release && ./bin/ultra_honk_bench --benchmark_filter="construct_proof_ultrahonk_power_of_2/20$"
    RUN cd op-count && ./bin/ultra_honk_bench --benchmark_filter="construct_proof_ultrahonk_power_of_2/20$"
    RUN cd op-count-time && ./bin/ultra_honk_bench --benchmark_filter="construct_proof_ultrahonk_power_of_2/20$"
    COPY +wasmtime/wasmtime /usr/bin/wasmtime
    RUN cd wasm && wasmtime run --env HARDWARE_CONCURRENCY=16 -Wthreads=y -Sthreads=y --dir=".." ./bin/ultra_honk_bench --benchmark_filter="construct_proof_ultrahonk_power_of_2/20$"

bench-client-ivc:
    BUILD +wasmtime # prefetch
    FROM ubuntu:noble
    COPY --dir +bench-binaries/* .
    # install SRS needed for proving
    COPY --dir ./srs_db/+build/. srs_db
    RUN cd release && ./bin/client_ivc_bench --benchmark_filter="ClientIVCBench/Full/6$"
    RUN cd op-count && ./bin/client_ivc_bench --benchmark_filter="ClientIVCBench/Full/6$"
    RUN cd op-count-time && ./bin/client_ivc_bench --benchmark_filter="ClientIVCBench/Full/6$"
    COPY +wasmtime/wasmtime /usr/bin/wasmtime
    RUN cd wasm && wasmtime run --env HARDWARE_CONCURRENCY=16 -Wthreads=y -Sthreads=y --dir=".." ./bin/client_ivc_bench --benchmark_filter="ClientIVCBench/Full/6$"

# Sent to the bench runner using a earthly --push +test-binaries
# then we can run earthly +test --test_mode=cache
test-binaries:
    ARG EARTHLY_GIT_HASH
    ARG TARGETARCH
    ARG test_mode=build
    LOCALLY
    IF [ $test_mode = cache ]
        FROM aztecprotocol/bb-test-binaries:$TARGETARCH-$EARTHLY_GIT_HASH
        SAVE ARTIFACT build
    ELSE
        FROM scratch
        COPY +preset-release-assert-test/bin/*_tests build/bin/
        SAVE ARTIFACT build
        SAVE IMAGE --push aztecprotocol/bb-test-binaries:$TARGETARCH-$EARTHLY_GIT_HASH
        SAVE IMAGE --push aztecprotocol/cache:$module-$EARTHLY_TARGET_NAME
    END

test-clang-format: #aztec-tag=cache
    ARG EARTHLY_TARGET_NAME
    FROM +source
    COPY .clang-format .
    COPY format.sh .
    RUN ./format.sh check
    SAVE IMAGE --push aztecprotocol/cache:$module-$EARTHLY_TARGET_NAME

test:
    ARG hardware_concurrency=""
    # prefetch
    BUILD +test-binaries
    BUILD +preset-release-assert-test
    BUILD +test-clang-format
    BUILD ./srs_db/+build # prefetch
    FROM +source
    COPY --dir +test-binaries/build build
    FROM +preset-release-assert-test
    COPY --dir ./srs_db/+build/. srs_db
    # limit hardware concurrency, if provided
    IF [ "$HARDWARE_CONCURRENCY" != "" ]
        ENV HARDWARE_CONCURRENCY=$hardware_concurrency
    END
    RUN cd build && GTEST_COLOR=1 ctest -j$(nproc) --output-on-failure
