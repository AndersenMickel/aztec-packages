VERSION 0.8
FROM ubuntu:lunar

RUN apt-get update && apt-get install -y \
  build-essential \
  curl \
  git \
  cmake \
  lsb-release \
  wget \
  software-properties-common \
  gnupg \
  ninja-build \
  npm \
  libssl-dev \
  jq \
  bash \
  libstdc++6 \
  clang-format

RUN wget https://apt.llvm.org/llvm.sh && chmod +x llvm.sh && ./llvm.sh 16
# let's not just spew files on /
WORKDIR /build
# WASM compiler, only redownload if this script changes
COPY ./scripts/install-wasi-sdk.sh ./scripts/install-wasi-sdk.sh
RUN ./scripts/install-wasi-sdk.sh

# minimum files to trigger rebuild
# keep timestamps for incremental builds
COPY --keep-ts src/barretenberg src/barretenberg
COPY --keep-ts src/CMakeLists.txt src/CMakeLists.txt
COPY --keep-ts CMakeLists.txt CMakeLists.txt
COPY --keep-ts cmake cmake
COPY --keep-ts CMakePresets.json CMakePresets.json

build-with-args:
    ARG configure
    ARG build
    # Use a mount for incremental builds.
    RUN --mount type=cache,id=$preset-build,target=/build/build \
        cmake $configure -Bbuild && \
        cmake --build build $build && \
        cp -r build/bin .
    # reconstruct build folder, as it was used in cache
    RUN mkdir build && mv bin build
    SAVE ARTIFACT build

ci-build:
    BUILD +release-build
    BUILD +wasm-build
    BUILD +gcc-build
    BUILD +fuzzing-build
    BUILD +clang-assert-build
    BUILD +clang-format-check

release-build:
    FROM +build-with-args --configure="--preset clang16" --build="--target ultra_honk_rounds_bench --target bb"

wasm-build:
    FROM +build-with-args --configure="--preset wasm-threads" --build="--target ultra_honk_rounds_bench --target bb"
    RUN ./scripts/strip-wasm.sh
    SAVE ARTIFACT build

gcc-build:
    FROM +build-with-args --configure="--preset gcc" --build=""

fuzzing-build:
    FROM +build-with-args --configure="--preset fuzzing" --build=""

clang-assert-build:
    FROM +build-with-args --configure="--preset clang16 -DCMAKE_BUILD_TYPE=RelWithAssert" --build=""

clang-format-check:
    COPY .clang-format .
    COPY format.sh .
    RUN ./format.sh check
    SAVE ARTIFACT build/bin

bench-with-args:
    ARG preset
    ARG target
    FROM +build-with-args --configure="--preset $preset" --build="--target $target"
    COPY ./srs_db:+download/build srs_db
    RUN cd build && ./bin/$target

wasm-bench-with-args:
    ARG target
    FROM +build-with-args --configure="--preset wasm-threads" --build="--target $target"
    COPY ./srs_db:+download/build srs_db
    RUN cd build && wasmtime run --env HARDWARE_CONCURRENCY=8 -Wthreads=y -Sthreads=y --dir=.. ./bin/$target

ci-bench:
    RUN curl https://wasmtime.dev/install.sh -sSf | bash
    BUILD +bench-with-args --preset=clang16 --target=ultra_honk_bench
    BUILD +bench-with-args --preset=clang16 --target=ivc_bench
    BUILD +bench-with-args --preset=op-count-track --target=ultra_honk_bench
    BUILD +bench-with-args --preset=op-count-track --target=ivc_bench
    BUILD +bench-with-args --preset=op-count-time --target=ivc_bench
    BUILD +wasm-bench-with-args --target=ultra_honk_bench
    BUILD +wasm-bench-with-args --target=ivc_bench