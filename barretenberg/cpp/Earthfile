VERSION 0.8
FROM ubuntu:lunar
IMPORT ./srs_db AS srs_db

RUN apt-get update && apt-get install -y \
  build-essential \
  curl \
  git \
  cmake \
  lsb-release \
  wget \
  software-properties-common \
  gnupg \
  ninja-build \
  npm \
  libssl-dev \
  jq \
  bash \
  libstdc++6 \
  clang-16 \
  clang-format

WORKDIR /build
# cpp source
COPY --keep-ts --dir src/barretenberg src/CMakeLists.txt src
# cmake source
COPY --keep-ts --dir cmake CMakeLists.txt CMakePresets.json .

SAVE IMAGE --cache-hint

build-release:
    DO +BUILD --configure="--preset clang16" --build="--target ultra_honk_rounds_bench --target bb"
    SAVE ARTIFACT build

build-wasm:
    FROM --platform=linux/amd64 +base
    # WASM compiler, only redownload if this script changes
    COPY ./scripts/install-wasi-sdk.sh ./scripts/install-wasi-sdk.sh
    RUN ./scripts/install-wasi-sdk.sh
    DO +BUILD --configure="--preset wasm-threads" --build="--target barretenberg.wasm"
    RUN ./src/wasi-sdk-20.0/bin/llvm-strip ./build/bin/barretenberg.wasm
    SAVE ARTIFACT build/bin bin

build-gcc:
    DO +BUILD --configure="--preset gcc" --build=""
    SAVE ARTIFACT build/bin bin

build-fuzzing:
    DO +BUILD --configure="--preset fuzzing" --build=""
    SAVE ARTIFACT build/bin bin

build-clang-assert:
    DO +BUILD --configure="--preset clang16 -DCMAKE_BUILD_TYPE=RelWithAssert" --build=""
    SAVE ARTIFACT build/bin bin

build-op-count:
    DO +BUILD --configure="--preset op-count -DCMAKE_BUILD_TYPE=RelWithAssert" --build=""
    SAVE ARTIFACT build/bin bin

build-op-count-time:
    DO +BUILD --configure="--preset op-count-time -DCMAKE_BUILD_TYPE=RelWithAssert" --build=""
    SAVE ARTIFACT build/bin bin

test-clang-format:
    COPY .clang-format .
    COPY format.sh .
    RUN ./format.sh check

bench-ultra-honk:
    DO +BENCH_RELEASE --target=ultra_honk_bench --args=""
    DO +BENCH_WASM --target=ultra_honk_bench --args=""

bench-client-ivc:
    DO +BENCH_RELEASE --target=client_ivc_bench --args="--benchmark_filter=ClientIVCBench/Full/6$"
    DO +BENCH_RELEASE --target=client_ivc_bench --args="--benchmark_filter=ClientIVCBench/Full/6$"
    DO +BENCH_WASM --target=client_ivc_bench --args="--benchmark_filter=ClientIVCBench/Full/6$"

# Functions
BUILD:
    FUNCTION
    ARG configure
    ARG build
    # builtin-arg, detects --ci
    ARG EARTHLY_CI
    IF $EARTHLY_CI
        # Don't cache CI builds.
        RUN cmake $configure -Bbuild && \
            cmake --build build $build
    ELSE
        # Use a mount for incremental builds locally.
        RUN --mount type=cache,id="$configure-build",target=/build/build \
            cmake $configure -Bbuild && \
            cmake --build build $build && \
            cp -r build/bin .
        # reconstruct build folder, as it was used in cache
        RUN mkdir build && mv bin build
    END

BENCH_RELEASE:
    FUNCTION
    ARG target
    ARG args
    FROM +build-release
    DO +BUILD --configure="--preset clang16" --build="--target $target"
    COPY --dir srs_db:+build/. srs_db
    RUN cd build && ./bin/$target $args 

BENCH_OP_COUNT_TIME:
    FUNCTION
    ARG target
    ARG args
    FROM +build-op-count-time
    DO +BUILD --configure="--preset op-count-time" --build="--target $target"
    COPY --dir srs_db:+build/. srs_db
    RUN cd build && ./bin/$target $args

BENCH_OP_COUNT:
    FUNCTION
    ARG target
    ARG args
    FROM +build-op-count
    DO +BUILD --configure="--preset op-count" --build="--target $target"
    COPY --dir srs_db:+build/. srs_db
    RUN cd build && ./bin/$target $args

BENCH_WASM:
    FUNCTION
    ARG target
    ARG args
    FROM +build-wasm
    DO +BUILD --configure="--preset wasm-threads" --build="--target $target"
    COPY --dir srs_db:+build/. srs_db/
    RUN cd build && ~/.wasmtime/bin/wasmtime run --env HARDWARE_CONCURRENCY=8 -Wthreads=y -Sthreads=y --dir=.. ./bin/$target $args