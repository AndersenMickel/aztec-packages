
// AUTOGENERATED FILE
#pragma once

#include "barretenberg/ecc/curves/bn254/fr.hpp"
#include "barretenberg/proof_system/arithmetization/arithmetization.hpp"
#include "barretenberg/proof_system/circuit_builder/execution_trace_builder_base.hpp"

#include "./ExampleRelation_trace.cpp"
#include "barretenberg/proof_system/arithmetization/generated/ExampleRelation_arith.hpp"
#include "barretenberg/proof_system/relations/generated/ExampleRelation.hpp"

using namespace barretenberg;
using fr = barretenberg::fr;

namespace proof_system {

class ExampleRelationTraceBuilder : public ExecutionTraceBuilderBase<arithmetization::ExampleRelationArithmetization> {
  public:
    using FF = arithmetization::ExampleRelationArithmetization::FF;
    using Row = ExampleRelation_vm::Row<FF>;

    static constexpr size_t num_fixed_columns = 5;
    std::vector<Row> rows;

    void build_circuit()
    {
        rows = read_both_file_into_cols("../commits.bin", "../constants.bin");

        // debug circuit values
        size_t i = 0;
        for (Row const& row : rows) {

            info(i++);
            info("islast",
                 row.Fibonacci_ISLAST,
                 " x ",
                 row.Fibonacci_x,
                 " y ",
                 row.Fibonacci_y,
                 " x_shift ",
                 row.Fibonacci_x_shift,
                 " y_shift ",
                 row.Fibonacci_y_shift);
        }
    }

    [[maybe_unused]] bool check_circuit()
    {
        // Get the rows from file
        build_circuit();

        return evaluate_relation<ExampleRelation_vm::ExampleRelation<FF>, Row>("ExampleRelation", rows);
    }

    [[nodiscard]] size_t get_num_gates() const { return rows.size(); }

    [[nodiscard]] size_t get_circuit_subgroup_size() const
    {
        const size_t num_rows = get_num_gates();
        const auto num_rows_log2 = static_cast<size_t>(numeric::get_msb64(num_rows));
        size_t num_rows_pow2 = 1UL << (num_rows_log2 + (1UL << num_rows_log2 == num_rows ? 0 : 1));
        return num_rows_pow2;
    }
};
} // namespace proof_system
