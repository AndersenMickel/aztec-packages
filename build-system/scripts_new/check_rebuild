#!/usr/bin/env bash
# If this script fails (nonzero exit), then the caller should rebuild.
[ -n "${BUILD_SYSTEM_DEBUG:-}" ] && set -x # conditionally trace
set -euo pipefail

TAG=$1
REPOSITORY=$2

# If given nothing, then exit with failure to rebuild
[ -n "$TAG" ] || exit 1

# Have we requested a rebuild via [ci rebuild] or [ci rebuild <job>] commit message?
[[ "$COMMIT_MESSAGE" == *"[ci rebuild $REPOSITORY]"* ]] && exit 1
[[ "$COMMIT_MESSAGE" == *"[ci rebuild]"* ]] && exit 1

DOCKERFILE=$(query_manifest dockerfile $REPOSITORY)

# If we are deploying, and our Dockerfile uses the COMMIT_TAG arg, we need to rebuild to ensure the latest version
# number is baked into the image.
# TODO: This should probably be properly handled by e.g. release-please bumping the version number as part of its PR
# which would invalidate the content hash, rather than us using Dockerfile ARGS.
if [ -n "$COMMIT_TAG" ] && grep -qE "^ARG COMMIT_TAG=" $DOCKERFILE; then
  exit 1
fi

X86=$(query_manifest x86 $REPOSITORY)
ARM=$(query_manifest arm $REPOSITORY)

# If the image doesn't exist, we need to rebuild.
if [ "$X86" == "true" ] && ! DOCKER_HOST=$DOCKER_HOST_X86 image_exists $REPOSITORY $TAG
  exit 1
fi

if [ "$ARM" == "true" ] && ! DOCKER_HOST=$DOCKER_HOST_ARM image_exists $REPOSITORY $TAG
  exit 1
fi
