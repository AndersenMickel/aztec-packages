# This image contains *just* what's needed to perform a full build of the aztec project.
# It acts as the base image for all CI builds, and we build on it to produce a developer box.

# Build wasi-sdk.
FROM ubuntu:noble AS wasi-sdk
RUN apt update && apt install -y \
    clang \
    cmake \
    ninja-build \
    git \
    cargo
RUN git clone --depth 1 --recursive --branch wasi-sdk-22 \
        https://github.com/WebAssembly/wasi-sdk.git
RUN cd wasi-sdk && MAKEFLAGS="-j$(nproc)" make -e build strip && \
    mv build/install/opt/wasi-sdk /opt/wasi-sdk

# Build foundry.
FROM ubuntu:noble AS foundry
RUN apt update && apt install -y git cargo
RUN ulimit -n 65535 && \
    git clone --depth 1 --branch nightly-de33b6af53005037b463318d2628b5cfcaf39916 \
        https://github.com/foundry-rs/foundry.git && \
    cd foundry && cargo build --profile local && \
    mkdir -p /opt/foundry/bin && \
    for t in forge cast anvil chisel; do \
        mv ./target/local/$t /opt/foundry/bin/$t; \
        strip /opt/foundry/bin/$t; \
    done

# Build actual image.
FROM ubuntu:noble
RUN apt update && \
    apt install -y \
        # Utils
        curl \
        git \
        curl \
        wget \
        jq \
        gawk \
        unzip \
        netcat-openbsd \
        # C++ (clang=18, which we will move to. 16 is for current build.)
        build-essential \
        cmake \
        ninja-build \
        clang \
        clang-16 \
        clang-format-16 \
        libc++-dev \
        libomp-dev \
        doxygen \
        # Node (18.19.1)
        nodejs \
        npm \
        # Python (clang bindings for wasm bindgen.)
        python3 \
        python3-clang \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install wasi-sdk.
COPY --from=wasi-sdk /opt/wasi-sdk /opt/wasi-sdk

# Install foundry.
COPY --from=foundry /opt/foundry /opt/foundry
ENV PATH="/opt/foundry/bin:$PATH"

# Install rust and cross-compilers. Noir specifically uses 1.73.0.
# We add group write ownership so downstream boxes can write.
ENV RUSTUP_HOME=/opt/rust/rustup \
    CARGO_HOME=/opt/rust/cargo \
    PATH="/opt/rust/cargo/bin:$PATH"
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.73.0 && \
    rustup target add wasm32-unknown-unknown wasm32-wasi aarch64-apple-darwin && \
    chmod -R g+w /opt/rust

# Install yq
RUN curl -L https://github.com/mikefarah/yq/releases/download/v4.42.1/yq_linux_$(dpkg --print-architecture) \
        -o /usr/local/bin/yq && chmod +x /usr/local/bin/yq

# Install yarn
RUN npm install --global yarn

# Install solhint
RUN npm install --global solhint