version: 2.1

setup: true # have a dynamic config step
orbs:
  continuation: circleci/continuation@1.0.0
  slack: circleci/slack@4.12.5

# This build step checks out the code from the repository. It has a hardcoded readonly key to allow the checkout.
# Initially it just fetches the repo metadata for the current commit hash to a depth of 50 commits.
# We need historical commit hashes to calculate diffs between previous and current commits.
# It then checks out the fetched head to actually download the data.
checkout: &checkout
  run:
    name: "Checkout code"
    command: |
      function retry() {
        # Retries up to 3 times with 10 second intervals
        for i in $(seq 1 3); do
          "$@" && return || sleep 10
        done
        echo "$@ failed after 3 attempts"
        exit 1
      }
      cd $HOME
      mkdir -p .ssh
      chmod 0700 .ssh
      retry ssh-keyscan -t rsa github.com >> .ssh/known_hosts

      # A read only key for cloning the repository.
      echo $GIT_CHECKOUT_KEY | base64 -d > .ssh/id_rsa

      chmod 0600 .ssh/id_rsa
      # IF YOU'RE CHANGING THIS, YOU ALSO WANT TO CHANGE: build-system/scripts/remote_runner
      # Shallow checkout this commit.
      mkdir -p project
      cd project
      git init
      git remote add origin $CIRCLE_REPOSITORY_URL

      # Only download metadata when fetching.
      retry git fetch --depth 1 --filter=blob:none origin $CIRCLE_SHA1
      retry git checkout FETCH_HEAD

jobs:
  # Dynamically filter our code, quickly figuring out which jobs we can skip.
  generate-config:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: large
    steps:
      - *checkout
      # - run:
      #     name: Generate Pipeline generated_config.yml file
      #     command: |
      #       # filter our circleci config to the minimal pipeline
      #       build-system/scripts/generate_circleci_config.py > .circleci/generated_config.yml
      - run:
          name: Chose between old and new ci.
          command: |
            COMMIT_MESSAGE=$(git log -n 1 --pretty=format:"%s" $CIRCLE_SHA1)
            if [[ "$COMMIT_MESSAGE" == *"[ci new-ci]"* ]]; then
              cp .circleci/config_new_ci.yml .circleci/generated_config.yml
            else
              cp .circleci/config_old_ci.yml .circleci/generated_config.yml
            fi
      - continuation/continue:
          configuration_path: .circleci/generated_config.yml

workflows:
  setup-workflow:
    jobs:
      - generate-config
