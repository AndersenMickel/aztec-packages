# Reusable setup workflow for CI tasks
name: Setup Workflow
description: "Reusable setup steps"

inputs:
  runner_label:
    required: true
  runner_action:
    default: start
    required: false
  runner_type:
    required: true
  github_token:
    required: true
  aws_access_key_id:
    required: true
  aws_secret_access_key:
    required: true
  run_id:
    required: true
  ec2_key:
    required: true
runs:
  # define an action, runs in OS of caller
  using: composite
  steps:
    - name: Select Instance Type and AMI
      id: select_instance
      shell: bash
      run: |
        TYPE=${{ inputs.runner_type }}
        if [[ $TYPE == builder-x86 ]]; then
          # 128-core x86 instance types with least evictions
          echo "instance_type=r6in.32xlarge r6a.32xlarge i4i.32xlarge r7iz.32xlarge" >> $GITHUB_OUTPUT
          echo "ami_id=ami-04d8422a9ba4de80f" >> $GITHUB_OUTPUT
          echo "ebs_cache_size=256" >> $GITHUB_OUTPUT
          echo "runner_concurrency=50" >> $GITHUB_OUTPUT
          echo "ttl=40" >> $GITHUB_OUTPUT
        elif [[ $TYPE == builder-arm ]]; then
          # 64-core ARM instance type
          echo "instance_type=r6g.16xlarge" >> $GITHUB_OUTPUT
          echo "ami_id=ami-0d8a9b0419ddb331a" >> $GITHUB_OUTPUT
          echo "ebs_cache_size=256" >> $GITHUB_OUTPUT
          echo "runner_concurrency=8" >> $GITHUB_OUTPUT
          echo "ttl=40" >> $GITHUB_OUTPUT
        elif [[ $TYPE == bb-bench-x86 ]]; then
          # 16-core x86 instance type
          echo "instance_type=m6a.4xlarge" >> $GITHUB_OUTPUT
          echo "ami_id=ami-04d8422a9ba4de80f" >> $GITHUB_OUTPUT
          echo "ebs_cache_size=64" >> $GITHUB_OUTPUT
          echo "runner_concurrency=1" >> $GITHUB_OUTPUT
          echo "ttl=40" >> $GITHUB_OUTPUT
        elif [[ $TYPE == 4core-no-cache-x86 ]]; then
          # 4-core x86 instance type
          echo "instance_type=m6a.large" >> $GITHUB_OUTPUT
          echo "ami_id=ami-04d8422a9ba4de80f" >> $GITHUB_OUTPUT
          # no github runners, 'bare spot' in action code
          echo "runner_concurrency=0" >> $GITHUB_OUTPUT
          echo "ttl=20" >> $GITHUB_OUTPUT
        fi

    - name: Start Builder
      uses: ./.github/spot-runner-action
      with:
        # inputs:
        runner_label: ${{ inputs.runner_label }}
        subaction: ${{ inputs.runner_action }}
        github_token: ${{ inputs.github_token }}
        aws_access_key_id: ${{ inputs.aws_access_key_id }}
        aws_secret_access_key: ${{ inputs.aws_secret_access_key }}
        ec2_key: ${{ inputs.ec2_key }}
        # constants:
        runner_concurrency: ${{ steps.select_instance.outputs.runner_concurrency }}
        ec2_instance_type: ${{ steps.select_instance.outputs.instance_type }}
        ec2_ami_id: ${{ steps.select_instance.outputs.ami_id }}
        ec2_spot_instance_strategy: None
        ec2_instance_ttl: ${{ steps.select_instance.outputs.ttl }} # refreshed by jobs if runner_concurrency > 0
        aws_region: us-east-2
        ec2_subnet_id: subnet-4cfabd25
        ec2_security_group_id: sg-0ccd4e5df0dcca0c9
        ec2_key_name: "build-instance"
        ec2_instance_tags: '[{"Key": "Keep-Alive", "Value": "true"}]'

    # Set up a context for this run
    - name: Copy Repo to Spot
      shell: bash
      run: |
        export RUN_ID=${{ inputs.run_id }}
        echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV
        # detect run folder
        if ! scripts/run_on_builder "[ -d ~/run-$RUN_ID ]" ; then
          echo "> Copying local repo to spot"
          tar czf - .git | scripts/run_on_builder \
            "mkdir -p ~/run-$RUN_ID-git && cd ~/run-$RUN_ID-git && tar xzf -" || true
          scripts/run_on_builder "
            echo "> Unpacking repo"
            git config --global advice.detachedHead false
            git clone ~/run-$RUN_ID-git/.git ~/run-$RUN_ID
          " || true
        fi

    - name: Attach EBS Cache Disk
      uses: ./.github/run-on-builder
      if: ! contains(inputs.runner_type, 'no-cache')
      with:
        run: |
          export AWS_ACCESS_KEY_ID=${{ inputs.aws_access_key_id }}
          export AWS_SECRET_ACCESS_KEY=${{ inputs.aws_secret_access_key }}
          # attach {ebs_cache_size}-gb cache disk
          ./scripts/ci/attach_ebs_cache.sh ${{ inputs.runner_label }} ${{ steps.select_instance.outputs.ebs_cache_size }}

    - name: Setup
      uses: ./.github/run-on-builder
      with:
        run: |
          # One-time config
          if ! [ -f ~/maybe_exit_spot.sh ] ; then
            # helps to not overuse space
            docker system prune -f -a || true
            # Run maybe_exit_spot.sh every minute
            cp scripts/ci/spot_runner_graceful_exit.sh ~/spot_runner_graceful_exit.sh
            cp scripts/ci/maybe_exit_spot.sh ~/maybe_exit_spot.sh
            chmod +x ~/spot_runner_graceful_exit.sh
            chmod +x ~/maybe_exit_spot.sh
            echo "* * * * * ~/maybe_exit_spot.sh" | crontab -
            echo "Pruned docker, configured graceful exit."
          else
            echo "Chron jobs already configured."
          fi
