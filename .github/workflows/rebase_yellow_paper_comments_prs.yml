name: Rebase Yellow Paper Comments PRs

# Every time a directory of the yellow paper is 'touched' on `master`, we want to rebase the corresponding "comments pr" for that directory (`dir`)
# The "comments prs" are all at branches named `yp-comments-${dir}`

on:
  push:
    branches:
      - mc/master
    paths:
      - 'yellow-paper/docs/**' # only trigger workflow if files in this dir are touched by a merge into master.

jobs:
  rebase-yp-comments-prs:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dir: [
          'addresses-and-keys',
          'bytecode',
          'calls',
          'circuits',
          'contract-deployment',
          'contracts',
          'cryptography',
          'decentralization',
          'gas-and-fees',
          'logs',
          'private-message-delivery',
          'public-vm',
          'rollup-circuits',
          'state',
          'transactions'
        ]

    steps:
    #TODO: Is there a way to avoid checking out the repo for every dir?
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.AZTEC_BOT_GITHUB_TOKEN }}
        ref: mc/yp-comments-${{ matrix.dir }} # branch name

    - name: Check if a yp-comments-${{ matrix.dir }} branch exists
      id: check-branch-exists
      run: |
        branch_name="mc/yp-comments-${{ matrix.dir }}"

        if git rev-parse --verify "$branch_name" >/dev/null 2>&1; then
            echo "Branch '$branch_name' exists."
            branch_exists=true
        else
            echo "Branch '$branch_name' does not exist."
            branch_exists=false
        fi
        echo "::set-output name=branch_exists::$branch_exists"

    - name: Determine if files in directory were touched
      id: check-touched
      run: |
        touched_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E "^yellow-paper/docs/${{ matrix.dir }}/.*$")
        echo "::set-output name=files_touched::$(echo "$touched_files" | wc -l)"

    - name: Rebase the branch of comments
      if: steps.check-branch-exists.outputs.branch_exists && steps.check-touched.outputs.files_touched != '0'
      run: |
        git config --global user.name AztecBot
        git config --global user.email tech@aztecprotocol.com
        git fetch origin mc/master
        git rebase origin/mc/master

        # Delete any extra files that have been added to the dir
        directory="yellow-paper/docs/${{ matrix.dir }}"
        if [ -d "$directory" ]; then
          rm -rf "$directory"/*
          if [ $? -eq 0 ]; then
              echo "Success: Contents of the directory have been deleted."
          else
              echo "Error: Failed to delete contents of the directory."
              exit 1
          fi
        else
            echo "Error: Directory does not exist."
            exit 1
        fi

        git push origin mc/yp-comments-${{ matrix.dir }} --force